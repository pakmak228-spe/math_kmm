import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
import asyncio
import json
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è 4 –∫—É—Ä—Å–∞ –ö–ú–ú —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É
SCHEDULE = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "13:25-15:00", "subject": "–ú–∞—Ç–º–æ–¥–µ–ª–∏ —Ñ–∏–Ω. —Ä—ã–Ω–∫–æ–≤", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "312"},
            {"time": "15:10-16:45", "subject": "–ò—Å—Å–ª–µ–¥. –æ–ø–µ—Ä–∞—Ü–∏–π", "teacher": "–ú–∏—Ö–∞–π–ª–æ–≤–∞ –ò.–í.", "room": "321"},
            {"time": "16:55-18:30", "subject": "–ß–∏—Å–ª. –º–µ—Ç–æ–¥—ã", "teacher": "–ö–æ—Å—Ç–∏–Ω –î.–í.", "room": "319"},
            {"time": "18:40-20:00", "subject": "–ü—Ä–æ–µ–∫—Ç–∏—Ä. –ü–û", "teacher": "–ë–µ–ª–æ–≥–ª–∞–∑–æ–≤–∞ –¢.–í.", "room": "501–ü"}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "13:25-15:00", "subject": "–ò—Å—Å–ª–µ–¥. –æ–ø–µ—Ä–∞—Ü–∏–π", "teacher": "–ú–∏—Ö–∞–π–ª–æ–≤–∞ –ò.–í.", "room": "306"},
            {"time": "15:10-16:45", "subject": "–ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", "teacher": "–ó–≤–µ—Ä–µ–≤–∞ –ú.–ë.", "room": "319"},
            {"time": "16:55-18:30", "subject": "–ß–∏—Å–ª. –º–µ—Ç–æ–¥—ã", "teacher": "–ö–æ—Å—Ç–∏–Ω –í.–ê.", "room": "305"},
            {"time": "18:40-20:00", "subject": "–ü—Ä–æ–µ–∫—Ç–∏—Ä. –ü–û", "teacher": "–ë–µ–ª–æ–≥–ª–∞–∑–æ–≤–∞ –¢.–í.", "room": "501–ü"}
        ]
    },
    "–í—Ç–æ—Ä–Ω–∏–∫": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "09:45-11:20", "subject": "–î–∏–Ω–∞–º. —Ç–µ–æ—Ä. –∏–Ω—Ñ.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"},
            {"time": "11:30-13:05", "subject": "–î–∏–Ω–∞–º. —Ç–µ–æ—Ä. –∏–Ω—Ñ.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"},
            {"time": "16:55-18:30", "subject": "–≠–ª–µ–º. —Ç–µ–æ—Ä. –∏–≥—Ä", "teacher": "–û—Ä–ª–æ–≤ –í.–ü.", "room": "325"},
            {"time": "18:40-20:00", "subject": "–≠–ª–µ–º. —Ç–µ–æ—Ä. –∏–≥—Ä", "teacher": "–û—Ä–ª–æ–≤ –í.–ü.", "room": "325"}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "09:45-11:20", "subject": "–î–∏–Ω–∞–º. —Ç–µ–æ—Ä. –∏–Ω—Ñ.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"},
            {"time": "15:10-16:45", "subject": "–≠–ª–µ–º. —Ç–µ–æ—Ä. –∏–≥—Ä", "teacher": "–û—Ä–ª–æ–≤ –í.–ü.", "room": "325"},
            {"time": "16:55-18:30", "subject": "–≠–ª–µ–º. —Ç–µ–æ—Ä. –∏–≥—Ä", "teacher": "–û—Ä–ª–æ–≤ –í.–ü.", "room": "325"}
        ]
    },
    "–°—Ä–µ–¥–∞": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "08:00-09:35", "subject": "–ë–ñ–î", "teacher": "–°–∫–æ—Ä–æ–±–æ–≥–∞—Ç–æ–≤–∞ –õ.–ì.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"},
            {"time": "11:30-13:05", "subject": "–ß–∏—Å–ª. –º–µ—Ç–æ–¥—ã", "teacher": "–°–∏–ª–∞–µ–≤–∞ –ú.–ë.", "room": "501–ü"},
            {"time": "13:25-15:00", "subject": "–ú–∞–∫—Ä–æ—Å—Ç–∞—Ç. –∞–Ω–∞–ª. –∏ –ø—Ä–æ–≥–Ω.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "305"},
            {"time": "15:10-16:45", "subject": "–ú–∞–∫—Ä–æ—Å—Ç–∞—Ç. –∞–Ω–∞–ª. –∏ –ø—Ä–æ–≥–Ω.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "305"}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "11:30-13:05", "subject": "–ß–∏—Å–ª. –º–µ—Ç–æ–¥—ã", "teacher": "–°–∏–ª–∞–µ–≤–∞ –ú.–ù.", "room": "312"},
            {"time": "13:25-15:00", "subject": "–ú–∞–∫—Ä–æ—Å—Ç–∞—Ç. –∞–Ω–∞–ª. –∏ –ø—Ä–æ–≥–Ω.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "305"},
            {"time": "15:10-16:45", "subject": "–ú–∞–∫—Ä–æ—Å—Ç–∞—Ç. –∞–Ω–∞–ª. –∏ –ø—Ä–æ–≥–Ω.", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "305"},
            {"time": "16:55-18:30", "subject": "–ú–∞—Ç–º–æ–¥–µ–ª–∏ —Ñ–∏–Ω. —Ä—ã–Ω–∫–æ–≤", "teacher": "–°—É—Ö–æ—á–µ–≤–∞ –õ.–ò.", "room": "305"}
        ]
    },
    "–ß–µ—Ç–≤–µ—Ä–≥": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "13:25-15:00", "subject": "–ú–∞—Ç–º–µ—Ç–æ–¥—ã –≤ —Å–æ—Ü–∏–æ–ª.", "teacher": "–¶–∞—Ä–µ–≤ –°.–õ.", "room": "365/409–ü"},
            {"time": "15:10-16:45", "subject": "–ú–∞—Ç–º–µ—Ç–æ–¥—ã –≤ –µ—Å—Ç–µ—Å—Ç–≤.", "teacher": "–ë—É—Ä–ª—É—Ü–∫–∞—è –ú.–®.", "room": "335/409–ü"}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "13:25-15:00", "subject": "–ú–∞—Ç–º–µ—Ç–æ–¥—ã –≤ —Å–æ—Ü–∏–æ–ª.", "teacher": "–¶–∞—Ä–µ–≤ –°.–õ.", "room": "365/409–ü"},
            {"time": "15:10-16:45", "subject": "–ú–∞—Ç–º–µ—Ç–æ–¥—ã –≤ –µ—Å—Ç–µ—Å—Ç–≤.", "teacher": "–ë—É—Ä–ª—É—Ü–∫–∞—è –ú.–®.", "room": "335/409–ü"}
        ]
    },
    "–ü—è—Ç–Ω–∏—Ü–∞": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "08:00-16:00", "subject": "–í–û–ï–ù–ù–ê–Ø –ö–ê–§–ï–î–†–ê", "teacher": "", "room": ""}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "08:00-16:00", "subject": "–í–û–ï–ù–ù–ê–Ø –ö–ê–§–ï–î–†–ê", "teacher": "", "room": ""}
        ]
    },
    "–°—É–±–±–æ—Ç–∞": {
        "—á–∏—Å–ª–∏—Ç–µ–ª—å": [
            {"time": "09:45-11:20", "subject": "–¢–µ–æ—Ä–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "teacher": "–ó—É–±–æ–≤–∞ –°.–ü.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"},
            {"time": "11:30-13:05", "subject": "–¢–µ–æ—Ä–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "teacher": "–ó—É–±–æ–≤–∞ –°.–ü.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"}
        ],
        "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å": [
            {"time": "09:45-11:20", "subject": "–¢–µ–æ—Ä–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "teacher": "–ó—É–±–æ–≤–∞ –°.–ü.", "room": "–î–∏—Å—Ç–∞–Ω—Ç"}
        ]
    }
}

class ScheduleBot:
    def __init__(self):
        self.base_date = datetime(2025, 10, 6)  # 6 –æ–∫—Ç—è–±—Ä—è 2025 - –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
        self.reminders_file = "reminders.json"
        self.reminders = self.load_reminders()
        
    def load_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.reminders_file):
                with open(self.reminders_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"Error loading reminders: {e}")
        return {}
    
    def save_reminders(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.reminders_file, 'w', encoding='utf-8') as f:
                json.dump(self.reminders, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Error saving reminders: {e}")
    
    def add_reminder(self, user_id: int, lesson_info: dict, reminder_time: datetime):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if str(user_id) not in self.reminders:
            self.reminders[str(user_id)] = []
        
        reminder = {
            "lesson_info": lesson_info,
            "reminder_time": reminder_time.isoformat(),
            "notified": False
        }
        
        self.reminders[str(user_id)].append(reminder)
        self.save_reminders()
    
    def get_week_type(self, target_date):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)"""
        days_diff = (target_date - self.base_date).days
        week_num = days_diff // 7
        return "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if week_num % 2 == 0 else "—á–∏—Å–ª–∏—Ç–µ–ª—å"
    
    def get_schedule_for_day(self, target_date):
        week_type = self.get_week_type(target_date)
        day_name_rus = self.get_russian_day_name(target_date.weekday())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è
        day_schedule = SCHEDULE.get(day_name_rus, {}).get(week_type, [])
        
        return {
            "day": day_name_rus,
            "date": target_date.strftime("%d.%m.%Y"),
            "week_type": week_type,
            "schedule": day_schedule
        }
    
    def get_russian_day_name(self, weekday):
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        return days[weekday]
    
    def format_schedule_message(self, schedule_data):
        if not schedule_data["schedule"]:
            return f"üìÖ *{schedule_data['day']}, {schedule_data['date']}*\nüè´ *4 –∫—É—Ä—Å –ö–ú–ú*\nüìã *–ù–µ–¥–µ–ª—è: {schedule_data['week_type']}*\n\n‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"
        
        message = f"üìÖ *{schedule_data['day']}, {schedule_data['date']}*\n"
        message += f"üè´ *4 –∫—É—Ä—Å –ö–ú–ú*\n"
        message += f"üìã *–ù–µ–¥–µ–ª—è: {schedule_data['week_type']}*\n\n"
        
        for i, lesson in enumerate(schedule_data["schedule"], 1):
            message += f"*{i}. {lesson['time']}*\n"
            message += f"   üéØ {lesson['subject']}\n"
            if lesson['teacher']:
                message += f"   üë®‚Äçüè´ {lesson['teacher']}\n"
            if lesson['room']:
                message += f"   üèõ {lesson['room']}\n"
            message += "\n"
        
        return message
    
    def create_reminder_keyboard(self, schedule_data, week_offset=0):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if not schedule_data["schedule"]:
            return None
            
        keyboard = []
        for i, lesson in enumerate(schedule_data["schedule"], 1):
            button_text = f"{i}. {lesson['time']} - {lesson['subject']}"
            callback_data = f"remind_{i-1}_{schedule_data['day']}_{schedule_data['week_type']}_{week_offset}"
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_week_schedule(self, start_date):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
        week_schedule = []
        for i in range(7):  # –ü–Ω-–í—Å
            day_date = start_date + timedelta(days=i)
            schedule_data = self.get_schedule_for_day(day_date)
            week_schedule.append(schedule_data)
        return week_schedule

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
schedule_bot = ScheduleBot()
bot = Bot(token=os.getenv('TELEGRAM_TOKEN'))
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/day - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞  
/week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ü–Ω-–í—Å)
/next_week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
/week_type - –∫–∞–∫–∞—è —Å–µ–π—á–∞—Å –Ω–µ–¥–µ–ª—è
/remind - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –ø–∞—Ä–µ (–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)

üè´ *4 –∫—É—Ä—Å –ö–ú–ú (–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞)*
üë®‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç—ã: [–í–∞—à–∏ —Ñ–∞–º–∏–ª–∏–∏]*
üìã –£—á–∏—Ç—ã–≤–∞—é —á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
    """
    await message.answer(welcome_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("day"))
async def today_schedule(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /day - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        today = datetime.now()
        schedule_data = schedule_bot.get_schedule_for_day(today)
        message_text = schedule_bot.format_schedule_message(schedule_data)
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in today_schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")

@dp.message(Command("tomorrow"))
async def tomorrow_schedule(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        tomorrow = datetime.now() + timedelta(days=1)
        schedule_data = schedule_bot.get_schedule_for_day(tomorrow)
        message_text = schedule_bot.format_schedule_message(schedule_data)
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in tomorrow_schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞")

@dp.message(Command("week"))
async def week_schedule(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–ü–Ω-–í—Å)"""
    try:
        today = datetime.now()
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        monday = today - timedelta(days=today.weekday())
        
        week_schedule = schedule_bot.get_week_schedule(monday)
        
        message_text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é*\n"
        message_text += "üè´ *4 –∫—É—Ä—Å –ö–ú–ú*\n"
        message_text += "üë®‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç—ã: [–í–∞—à–∏ —Ñ–∞–º–∏–ª–∏–∏]*\n\n"
        
        for day_schedule in week_schedule:
            message_text += f"*{day_schedule['day']}, {day_schedule['date']}*\n"
            message_text += f"üìã *–ù–µ–¥–µ–ª—è: {day_schedule['week_type']}*\n"
            
            if not day_schedule["schedule"]:
                message_text += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
            else:
                for lesson in day_schedule["schedule"]:
                    message_text += f"‚è∞ {lesson['time']} - {lesson['subject']}"
                    if lesson['room']:
                        message_text += f" ({lesson['room']})"
                    message_text += "\n"
                message_text += "\n"
        
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in week_schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é")

@dp.message(Command("next_week"))
async def next_week_schedule(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /next_week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
    try:
        today = datetime.now()
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
        next_monday = today + timedelta(days=(7 - today.weekday()))
        
        week_schedule = schedule_bot.get_week_schedule(next_monday)
        
        message_text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é*\n"
        message_text += "üè´ *4 –∫—É—Ä—Å –ö–ú–ú*\n"
        message_text += "üë®‚Äçüéì *–°—Ç—É–¥–µ–Ω—Ç—ã: [–í–∞—à–∏ —Ñ–∞–º–∏–ª–∏–∏]*\n\n"
        
        for day_schedule in week_schedule:
            message_text += f"*{day_schedule['day']}, {day_schedule['date']}*\n"
            message_text += f"üìã *–ù–µ–¥–µ–ª—è: {day_schedule['week_type']}*\n"
            
            if not day_schedule["schedule"]:
                message_text += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n\n"
            else:
                for lesson in day_schedule["schedule"]:
                    message_text += f"‚è∞ {lesson['time']} - {lesson['subject']}"
                    if lesson['room']:
                        message_text += f" ({lesson['room']})"
                    message_text += "\n"
                message_text += "\n"
        
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in next_week_schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")

@dp.message(Command("week_type"))
async def week_type_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /week_type - —Ç–∏–ø —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    try:
        today = datetime.now()
        week_type = schedule_bot.get_week_type(today)
        next_week_type = "—á–∏—Å–ª–∏—Ç–µ–ª—å" if week_type == "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" else "–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"
        next_monday = today + timedelta(days=(7 - today.weekday()))
        
        message_text = f"üìã *–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {week_type}*\n"
        message_text += f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è ({next_monday.strftime('%d.%m.%Y')}): {next_week_type}"
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Error in week_type_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏")

@dp.message(Command("remind"))
async def remind_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remind - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="remind_week_0"),
                InlineKeyboardButton(text="üìÖ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="remind_week_1")
            ]
        ])
        
        await message.answer(
            "üîî –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
            reply_markup=keyboard
        )
            
    except Exception as e:
        logger.error(f"Error in remind_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@dp.callback_query(F.data.startswith("remind_week_"))
async def process_week_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        week_offset = int(callback.data.split("_")[2])  # 0 - —Ç–µ–∫—É—â–∞—è, 1 - —Å–ª–µ–¥—É—é—â–∞—è
        
        today = datetime.now()
        start_date = today + timedelta(weeks=week_offset)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
        week_schedule = schedule_bot.get_week_schedule(start_date - timedelta(days=start_date.weekday()))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        keyboard_buttons = []
        for day_schedule in week_schedule:
            if day_schedule["schedule"]:  # –¢–æ–ª—å–∫–æ –¥–Ω–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
                day_name = day_schedule["day"]
                date_str = day_schedule["date"]
                button_text = f"{day_name} ({date_str})"
                callback_data = f"remind_day_{day_name}_{week_offset}"
                keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        if not keyboard_buttons:
            await callback.answer("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            return
        
        week_name = "—Ç–µ–∫—É—â–µ–π" if week_offset == 0 else "—Å–ª–µ–¥—É—é—â–µ–π"
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback.message.edit_text(
            f"üîî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ {week_name} –Ω–µ–¥–µ–ª–µ:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error in process_week_selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ–¥–µ–ª–∏")

@dp.callback_query(F.data.startswith("remind_day_"))
async def process_day_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        data_parts = callback.data.split("_")
        day_name = data_parts[2]
        week_offset = int(data_parts[3])
        
        today = datetime.now()
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        days_mapping = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2, "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6}
        target_day_index = days_mapping[day_name]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        week_monday = today - timedelta(days=today.weekday()) + timedelta(weeks=week_offset)
        target_date = week_monday + timedelta(days=target_day_index)
        
        schedule_data = schedule_bot.get_schedule_for_day(target_date)
        keyboard = schedule_bot.create_reminder_keyboard(schedule_data, week_offset)
        
        if keyboard:
            await callback.message.edit_text(
                f"üîî –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {day_name}, {target_date.strftime('%d.%m.%Y')}:\n(—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)",
                reply_markup=keyboard
            )
        else:
            await callback.answer("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            
    except Exception as e:
        logger.error(f"Error in process_day_selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è")

@dp.callback_query(F.data.startswith("remind_"))
async def process_reminder_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        if callback.data.startswith("remind_week_") or callback.data.startswith("remind_day_"):
            return  # –≠—Ç–∏ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            
        data_parts = callback.data.split("_")
        lesson_index = int(data_parts[1])
        day_name = data_parts[2]
        week_type = data_parts[3]
        week_offset = int(data_parts[4])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ
        day_schedule = SCHEDULE.get(day_name, {}).get(week_type, [])
        if lesson_index >= len(day_schedule):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        lesson = day_schedule[lesson_index]
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã
        start_time_str = lesson['time'].split('-')[0]
        start_time = datetime.strptime(start_time_str, "%H:%M").time()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
        today = datetime.now()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏
        days_mapping = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–í—Ç–æ—Ä–Ω–∏–∫": 1, "–°—Ä–µ–¥–∞": 2, "–ß–µ—Ç–≤–µ—Ä–≥": 3, "–ü—è—Ç–Ω–∏—Ü–∞": 4, "–°—É–±–±–æ—Ç–∞": 5, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6}
        target_day_index = days_mapping[day_name]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        week_monday = today - timedelta(days=today.weekday()) + timedelta(weeks=week_offset)
        target_date = week_monday + timedelta(days=target_day_index)
        
        # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã
        lesson_datetime = datetime.combine(target_date.date(), start_time)
        
        # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞)
        reminder_time = lesson_datetime - timedelta(minutes=5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∞ –ª–∏ —É–∂–µ –ø–∞—Ä–∞
        if reminder_time < datetime.now():
            await callback.answer("‚ùå –≠—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_bot.add_reminder(callback.from_user.id, lesson, reminder_time)
        
        await callback.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time.strftime('%H:%M %d.%m.%Y')}")
        await callback.message.edit_text(
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üìö *{lesson['subject']}*\n"
            f"‚è∞ {lesson['time']}\n"
            f"üë®‚Äçüè´ {lesson.get('teacher', '')}\n"
            f"üèõ {lesson.get('room', '')}\n"
            f"üìÖ {target_date.strftime('%d.%m.%Y')}\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"Error in process_reminder_callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

async def check_reminders():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            current_time = datetime.now()
            notifications_sent = False
            
            for user_id_str, user_reminders in schedule_bot.reminders.items():
                for reminder in user_reminders[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    if reminder.get("notified"):
                        continue
                    
                    reminder_time = datetime.fromisoformat(reminder["reminder_time"])
                    if current_time >= reminder_time:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        lesson = reminder["lesson_info"]
                        try:
                            await bot.send_message(
                                int(user_id_str),
                                f"üîî *–°–∫–æ—Ä–æ –ø–∞—Ä–∞!*\n\n"
                                f"üìö *{lesson['subject']}*\n"
                                f"‚è∞ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {lesson['time'].split('-')[0]}\n"
                                f"üë®‚Äçüè´ {lesson.get('teacher', '')}\n"
                                f"üèõ {lesson.get('room', '')}",
                                parse_mode=ParseMode.MARKDOWN
                            )
                            reminder["notified"] = True
                            notifications_sent = True
                        except Exception as e:
                            logger.error(f"Error sending reminder to {user_id_str}: {e}")
                            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            user_reminders.remove(reminder)
            
            if notifications_sent:
                schedule_bot.save_reminders()
                
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"Error in check_reminders: {e}")
            await asyncio.sleep(60)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(check_reminders())
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not os.getenv('TELEGRAM_TOKEN'):
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(main())
